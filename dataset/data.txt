
Flex is a flexible programming language designed to support multiple syntax styles, including Franko Arabic, English, and other common programming syntax conventions. The core idea behind Flex is to enable users to write code in a syntax they are comfortable with while maintaining a consistent logic structure. The language uses regular expressions (regex) for tokenization, making it efficient for identifying and parsing different language constructs. Flex supports various programming constructs such as functions, loops, conditionals, variables, and operations, with unique keywords and variations to accommodate different language preferences. For example, Flex uses "fun" or "sndo2" for function definitions, and "if", "cond" for conditionals, with variations in the syntax like "while" being replaced by "loop" or "for" and "karr" for loops. Data types such as "int", "float", and "bool" are represented as "rakm", "kasr", and "so2al", respectively, with Flex also supporting more flexible data structures like lists, indicated by "list" or "dorg". Operators like addition, subtraction, multiplication, and division follow typical programming conventions with symbols (+, -, *, /), while logical operations are represented using keywords such as "and", "or", and "not". Flex also offers control flow mechanisms such as "break", "return", and "continue", while handling errors gracefully through well-defined syntax and error messages. A significant feature of Flex is its ability to manage comments and long comments, with support for both single-line comments (using "#" or "//") and multi-line comments (using triple quotes or "/*...*/"). Flex supports a variety of built-in constructs for iteration, comparison, and logical operations, ensuring that users can express logic in an intuitive way across different cultural and linguistic contexts. The use of regular expressions allows for efficient error detection and recovery, making Flex a powerful and versatile language for developing software in diverse environments.
-------------------------------------------------------------------------------------------------------------------------------
no ; in end of any line
-------------------------------------------------------------------------------------------------------------------------------
for Syntax :

# Token types
TOKENS = [
    ('FUN', r'\b(?:fun|sndo2|sando2|fn|function)\b'),  # Function keyword
    ('ADD', r'(.append|.push)'),  # List addition methods
    ('POP', r'(.pop)'),  # List pop method
    ('REMOVE', r'(.remove|.delete)'),  # List remove/delete methods
    ('SCAN', r'\b(scan|read|input|da5l|da5al|d5l)\b'),  # Input/scan keywords
    ('IF', r'\b(if|cond)\b'),  # If statement keywords
    ('LW', r'(\blw\b)'),  # If statement keyword in another language
    ('ELIF', r'(elif)'),  # Elif statement keyword
    ('AW', r'(\baw\b)'),  # Elif statement keyword in another language
    ('ELSE', r'(else|otherwise|gher)'),  # Else statement keywords
    ('PRINT', r'\b(etb3|out|output|print|printf|cout)\b'),  # Print statement keywords
    ('WHILE', r'(while|loop)'),  # While loop keywords
    ('TALAMA', r'(talama|talma|tlma)'),  # While loop keyword in another language
    ('FOR', r'for'),  # For loop keyword
    ('REPEAT', r'\b(krr|karr|karar)\b'),  # Repeat loop keyword
    ('UNTILL', r'(\bl7d\b)'),  # Until keyword
    ('SEMICOLON', r';'),  # Semicolon
    ('RETURN', r'\b(?:return|rg3|raga3)\b'),  # Return statement keywords
    ('BREAK', r'(break|stop|w2f|wa2af)'),  # Break statement keywords
    ('NUMBER', r'\d+(\.\d+)?'),  # Numbers and floats
    ('STRING', r'\".*?\"'),  # Strings
    ('LIST', r'\b(?:list|dorg|drg)\b'),  # List keyword
    ('LBRACKET', r'\['),  # Left square bracket
    ('RBRACKET', r'\]'),  # Right square bracket
    ('LPAREN', r'\('),  # Left parenthesis
    ('RPAREN', r'\)'),  # Right parenthesis
    ('LBRACE', r'\{'),  # Left curly brace
    ('RBRACE', r'\}'),  # Right curly brace
    ('GE', r'>=|=>'),  # Greater than or equal to
    ('LE', r'<=|=<'),  # Less than or equal to
    ('GT', r'>'),  # Greater than
    ('LT', r'<'),  # Less than
    ('AND', r'and'),  # And operator
    ('OR', r'or'),  # Or operator
    ('NOT', r'not'),  # Not operator
    ('EQ', r'=='),  # Equal operator
    ('NEQ', r'!='),  # Not equal operator
    ('ASSIGN', r'='),  # Assignment operator
    ('TRUE', r'\b(true|True|TRUE|sa7|s7|sah|saa7)\b'),  # Boolean true
    ('FALSE', r'(false|False|FALSE|ghalt|ghlt|ghalat)'),  # Boolean false
    ('INT', r'\b(?:int|rakm)\b'),  # Integer type
    ('FLOAT', r'\b(?:float|kasr|ksr)\b'),  # Float type
    ('BOOL', r'\b(?:bool|so2al|s2al|so2l)\b'),  # Boolean type
    ('STR', r'\b(?:string|klma|kalma)\b'),  # String type
    ('IMPORT', r'\b(geep|geeb|import)\b'),  # Import statement keywords
    ('ID', r'[a-zA-Z_][a-zA-Z_0-9]*'),  # Identifiers (variable names)
    ('SKIP', r'[ \t]+'),  # Skip spaces and tabs
    ('NEWLINE', r'\n'),  # New lines
    ('INCREMENT', r'\+\+'),  # Increment operator
    ('DECREMENT', r'\-\-'),  # Decrement operator
    ('PLUS', r'\+'),  # Addition operator
    ('MINUS', r'-'),  # Subtraction operator
    ('MULT', r'\*'),  # Multiplication operator
    ('LONG_COMMENT', r'\'\'\'[\s\S]*?\'\'\'|/\*[\s\S]*?\*/'),  # Long comments
    ('COMMENT', r'(#.*|//.*)'),  # Single-line comments
    ('DIV', r'\/'),  # Division operator
    ('COMMA', r','),  # Comma for separating parameters and arguments
]

-------------------------------------------------------------------------------------------------------------------------------------------------

Examples:

x=5
y=3
z=0
lw x<10 and y<1
{
    print(x)
    print(y)
}
aw y<2
{
    print("y is {y}")
}
aw y<4
{
    print("x + y are {x+y}")
}
gher
{
    print("x is {x}")
}
karr l7d 10{
    print("fefrf")
}

karr d=7 l7d -7{
    print(d)
}
karr x l7d 8
{
    print("mmmmm")
}
talama z<5{
    print(z)
    z++
}

talama y<5 and z<10
{
    print("y and z are {y} {z}")
    y++
    z++
}


x=10
intttt=6
funnnn=7.6
booll=5
test_var=0
z=5
i=6
for(i=4;i<10;i++){
    print("i is {i}")
    if (i==6){
        break
    }
}
fun xyz(int oo){
    print("enter number")
    test_var=9
    x=scan()
    print(oo)
    return x
}
//int r="njn"
int t=5.6
//bool rf="kkmkm"
print(t)
xyz(5)


for(z=0;z<8;z++){
    print("z is {z}")
}

list xx =[6,2,3,4]
print(xx)
xx.push(23)
xx.push("worddd")
print(xx)
xx.pop()
print(xx)
xx.remove(3)
print(xx)
list qq=[12,22,34]
print("x0+q1={xx[0]+qq[1]}")
print(xx[0]+qq[1])
int no=xx[0]*xx[1]
ew=xx[0]*xx[1]
print(no-ew)
print("no is {no}")
if (xx[0]<xx[1]){
    print("xo is smaller")
}
xx[0]=9*2
for(i=0;i<xx[0];i++){
    print("iiii is {i}")
}
//print(no)
xx[2] = "sdfsdf"
xx[3]=scan()
u = "sdfsdfsd"
xx[0] = u
print(xx)
print(xx[2])


print(intttt+funnnn+booll)
print(x)
x=(x+2)*5
print(x)

fun greet(int x,list arr) {
    print(x)
    test_var=333
    for(i=0;i<4;i++){
        print("list element {i} is {arr[i]}")
    }
    arr[0]=990
    print("Hello, World!")
    int varr=87
    //return p1
    print("enter vall")
    int val=scan()
    print("val is {val}")
    x=5
    if (x>8){
        return 88
    }
    elif (1>2){
        return 99
    }
    for(i=0;i<10;i++){
        print(i)
        if (i==7){
            break
        }
    }
    bhjb=varr+7
    print(bhjb+8+9-8)
    #x=334
    y=5
    return true
    print("dedddd")
}
pv=9
s=1
t=2
xx[0]=5
//greet(test_var+qq[1])
xx[3]=45
greet(xx[3],xx)
//int yyy=greet(xx[3])
print(x)
print(xx)

x=10
y=1

fun add(int x, int y,int u) {
    r=x
    print(r)
    '''for(r=0;r<20;i++){
        return 44
    }
    if (r>50){
        print("rrrrrrrrrr")
    }'''
    return x + y +u
}
fun min(int t, int b) {
    return t + b 
}

fun tms(int q, int w) {
   
   if(w>3){
     print("werwe")
   }
   return 6
  
}
tms(4,6)
for(i=0;i<23;i++){
    print("i is {i}")
    if (i==7){
        break
    }
}
q=0
while(q<30){
    if (q==10){
        break
    }
    print("q is {q}")
    q++
}

r = add(78,5,7.5)
print(r)


result = add(x,y,8)
print(result)  # Output: 15
result = add(1,5,x)
print(result)



tmp = min(4,9)
print(tmp)
result = add(x, y,0)
print(result)
v=add(1,2,3)
print(v)









'''


print("z is {z}")
x=10
x=(x+2)*4
print("x is {x}")


q=4
//fukval=greet()
print(q)

while(q<10){
    print(q)
    q++
    if (q==8){
        print("should leave")
        break
    }
}
//greet()
//s=scan()
er="jnnkn"
er=8
//x=scan()
print("var is {er}")

string x="ekmemf"
print("str is {x}")
//x=scan()
varr=78
//greet()
print(varr)
//greet()
x=4
y=5
z=6
if (x==4 and y==5 and not(z>1)){
    print("kkmed")
}
print(x)
y=50
if (x==5 or not(y<6)){
    print("qwwee")
}
x=2334
x=x+1
print(x)
y=x
x=89
x=1+8
x=x+1
y=7
//int x=6+y
x=4
y=78
z=x+1
print(z+7)
x=1.2
x=x+4
x=y+1
string werrr="scan_now"
x="True"
werrr=true
print(werrr)
print("dkmfk")
float qwe=0/3
x="sfgrg"
if (x=="sfgrg"){print("suuui nigga")}


y=8
z=67
z++
print(z)
//float x=89
yer=78
yer=8
print("x is {x}")
print(z)
//bool z=true
int lo=98
//z=7
print(z)
wer=4.5
print(x)
print(y)
int u =2*10
yer=66
u++
//x=false
print(u)
print("enter value of c ")
c=56
print("c is {c}")
if (0>1){
    print("jmjm")
}
elif (2>u){
    print("kemmdke")
}
elif (3>u){
    print("still no")
}
elif (1>0){
    print("yess")
}
elif(55>5){
    print("kmkmkmkmkm")
}
else{print("uuuuuu")}
c=4
u=3*(-2-2)
print(u)
if (1>2){
    print("never")
}
elif(55>3){
    print("nooo")
}
elif(55>22){
    print("nooo22")
}
elif(1>3){
    print("nooo33")
}
else{
    print("nnoo")
}
x=false
var=22
x=33
if (7>0){
    print("nnoonkn")
}


//greet()

print(x)
print("this is {x/0}")
wer=true
x=34
print(x)

y=-5
etb3(y)
print("this var is sdds")
if (x<y){print("jnjnrnf")}
#z=--2
u=3/-4
print("z is {z}")
print("u is {u}")
float y = 5.555
bool t = false
etb3("x = {x}")
etb3("y = {y}")
etb3("t is {t}")
x = 10 -2 
etb3("New x = {x}")

//if (2<4){print("this is crazyy")}
lw (9 < 7){
      etb3("kokgdgoko")
  etb3("helrgerglo")
print("x")
print("{x}")
}
if (1 <= 3) {
    print("Hello and x = {x} and y = {y}")
}
lw (5 < 4) {
    etb3("This should not print")
}

x = 1
while(x) {
    etb3("mah")
    x = x + 1
    if (x == 5) {
        break
    }
}

etb3("frfrfrfr") 
x = x * 3 + 4 / 2 + 0 
print("x ={x}")

print("Rfrf {x}")
int yo = 9
if(yo==9){
    etb3("frfr")
}

lw(x>yo){
    print("ok")
}
print("rfr")
int j = 8
b =5*4/5*y
print("{b}")
//int 



l =0
x=u
//e=iw
print("{lfgd}")
n=90
x=5
--x
print(x)
for (i = 1; i =< 9; i=i+1) {
    etb3("i is {i}")
    for (k = 0; k =< i; k=k+1) {
    etb3("i is {k}")
    if(k==90){
        break
    }
}
    if(i==90){
        break
    }
}
for (k = 0; k =< i; k=k+1) {
    etb3("i is {k}")
    if(k==90){
        break
    }
    x=6
    while(true){
        print("ff")
          x++
          if(x==12){
            break
          }
    }
}

for (i = 0; i > -5; i--) {
    etb3("i is ")
}

'''

for(i=0;i<7;i++){
 print("sdfsd")
}
etb3("----------------------------------")

for(z=0;z<8;z++){
    print("z is {z}")
}
etb3("----------------------------------")
q=0
while(q<30){
    if (q==10){
        break
    }
    print("q is {q}")
    q++
}
etb3("----------------------------------")
rakm x = 546456
print(x)
dorg o =["sfsdf",23,true]
print(o[1])
u= da5l()
print(u)
sndo2 tms(int q, int w) {
   
   if(w>3){
     print("werwe")
   }
   rg3 66
  
}
r=tms(4,6)
print(r)

list b =[2,3,4,5,6]
etb3(b)

----------------------------------------------------------------------------------------------------------------------------
more exampls:

To print in flex you can use:

etb3("sfsdfsds")
print("sddfsfs") #"" for strings
print(x)  # for vars
etb3(x)
etb3(2+3) # for nums
Note: Strings must be enclosed in double quotes "".
Note: You can print expressions, variables, or strings directly.
-----------------------------------------------
To input in flex you can use:

x=da5l() # for entering any thind string, int,float
y = input()
note: you cant use da5l() or input() alone, you need to declare them to a var like x = da5l()
note: you cant put any thing in da5l(anything) the () showd rmain empty
-----------------------------------------------------------------
No Semicolons: Flex does not require semicolons at the end of lines.
---------------------------------------------------------------
To Declare integer in Flex you can use:

rakm x = 10         # Explicit declaration
x = 15              # Auto-detection as integer
----------------------------------------------------------------------
To Declare float in Flex you can use:

kasr pi = 3.14      # Explicit declaration
x = 5.5             # Auto-detection as float
----------------------------------------------------------------------
To Declare boolean in Flex you can use:

so2al v = sa7  # True
so2al d = ghalt # False
----------------------------------------------------------------------
To Declare list in Flex you can use:

dorg myList = [1, 2, "three", sa7] # Heterogeneous list
--------------------------------------------------------------------
To use if condition in Flex you can use:

lw x > 5 { 
    etb3("Greater than 5") 
}
----------------------------------------------------------------------
or To use if condition in Flex you can use:

lw x > 5 { 
    etb3("Greater than 5") 
}
aw x == 5 { 
    etb3("Equal to 5") 
}
gher { 
    etb3("Less than 5") 
}
Note: Blocks must be enclosed in {}.
Note: gher (else) cannot have a condition.
----------------------------------------------------------------------
To use for loop in Flex you can use:

karr x = 1 l7d 5 { 
    etb3(x) 
}               # Loops from 1 to 5

karr l7d 3 { 
    etb3("Flex") 
}               # Loops from 0 to 3

karr x l7d 3 { 
    etb3("Flex") 
}               # Loops from x to 3, x must be decleard in top
Note: Loops require a valid range or condition.
Note: Use w2f to break out of a loop.
----------------------------------------------------------------------
To use while loop in Flex you can use:

talama x < 10 { 
    etb3(x) 
    x = x + 1 
}

talama x > 10 { 
    etb3(x) 
    x = x + 1
    lw X==5 {
       w2f  
       }  # stop when x == 5
}
Note: Loops require a valid range or condition.
Note: Use w2f to break out of a loop.
----------------------------------------------------------------------
To use function in Flex you can use:

sndo2 greet() { 
    etb3("Hello, Flex!") 
}               # Simple function

sndo2 add(rakm a, rakm b) { 
    rg3 a + b   # Returns sum of a and b
}

Note: Functions are declared using sndo2 and return values with rg3.
----------------------------------------------------------------------
To declare variables in Flex you can use:

rakm a = 5         # Declares an integer variable
kasr b = 3.14      # Declares a float variable
so2al isActive = sa7  # Declares a boolean variable
klma message = "Hello, Flex!" # Declares a string
dorg mixedList = [1, "two", sa7, 3.14] # Declares a list
----------------------------------------------------------------------
To perform arithmetic operations in Flex you can use:

rakm a = 10
rakm b = 5
rakm c = a + b  # Adds two integers
kasr d = 3.5
kasr e = d * b  # Multiplies a float and an integer
etb3(c)         # Prints 15
etb3(d / 2)     # Prints 1.75

----------------------------------------------------------------------
To print in Flex you can use:

etb3("Welcome to Flex!")
----------------------------------------------------------------------
To print in Flex you can use:

rakm a = 5
kasr b = 3.5
etb3("The value of a is {a} and b is {b}")
----------------------------------------------------------------------
To print in Flex you can use:

etb3(10 * 2 + 5)
----------------------------------------------------------------------
To print in Flex you can use:

klma greeting = "Hello, World!"
etb3(greeting)
-------------------------------------------------------------------
to use loops in flex you can do it in many ways like:

talama x < 10 { 
    etb3(x) 
    x = x + 1 
}

talama x > 10 { 
    etb3(x) 
    x = x + 1
    lw X==5 {
       w2f  
       }  # stop when x == 5
}

#OR#

while(q<30){
    if (q==10){
        break
    }
    print("q is {q}")
    q++
}

#OR#

while(q<30){
    if (q==10){
        w2f  #same as break
    }
    print("q is {q}")
    q++
}