{"prompt": "Write a program to print Hello World in Flex", "completion": "etb3(\"Hello World\")"}
{"prompt": "How do I declare an integer variable x with value 5 in Flex?", "completion": "rakm x = 5"}
{"prompt": "Write a function to add two numbers in Flex", "completion": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}"}
{"prompt": "How do I create a while loop in Flex?", "completion": "talama condition {\n  # code here\n}"}
{"prompt": "Write an if-else statement in Flex", "completion": "lw condition {\n  # code for true\n} gher {\n  # code for false\n}"}
{"prompt": "How do I get user input in Flex?", "completion": "etb3(\"Enter a value:\")\nx = da5l()"}
{"prompt": "Write a program to check if a number is prime in Flex", "completion": "sndo2 isprime(rakm num) {\n  rakm pos = absolute(num)\n  lw num <= 1 {\n    etb3(\"{num} is not a prime number\")\n    rg3 false\n  }\n  rakm i = 2\n  rakm mul = i * i\n  talama mul <= num {\n    lw do_modulus(pos, i) == 0 {\n      etb3(\"{num} is not a prime number\")\n      rg3 false\n    }\n    i = i + 1\n    mul = i * i\n  }\n  etb3(\"{num} is a prime number\")\n  rg3 true\n}"}
{"prompt": "How do I create a for loop in Flex?", "completion": "karr x = 1 l7d 5 {\n  etb3(x)\n}"}
{"prompt": "Write a program to calculate factorial in Flex", "completion": "sndo2 factorial(rakm n) {\n  lw n <= 1 {\n    rg3 1\n  }\n  rg3 n * factorial(n - 1)\n}"}
{"prompt": "Fix this code: if x > 5 print(x)", "completion": "lw x > 5 {\n  etb3(x)\n}"}
{"prompt": "How do I declare a list in Flex?", "completion": "dorg myList = [1, 2, 3]"}
{"prompt": "Write a calculator program in Flex", "completion": "sndo2 calculator(klma op, rakm a, rakm b) {\n  lw op == \"add\" {\n    rg3 a + b\n  } aw op == \"sub\" {\n    rg3 a - b\n  } aw op == \"mul\" {\n    rg3 a * b\n  } aw op == \"div\" {\n    lw b != 0 {\n      rg3 a / b\n    } gher {\n      etb3(\"Cannot divide by zero\")\n      rg3 0\n    }\n  }\n}"}
{"prompt": "How do I check if a number is even in Flex?", "completion": "sndo2 isEven(rakm num) {\n  lw do_modulus(num, 2) == 0 {\n    rg3 sa7\n  }\n  rg3 ghalt\n}"}
{"prompt": "Write a program to find the maximum of three numbers in Flex", "completion": "sndo2 findMax(rakm a, rakm b, rakm c) {\n  lw a >= b and a >= c {\n    rg3 a\n  } aw b >= a and b >= c {\n    rg3 b\n  } gher {\n    rg3 c\n  }\n}"}
{"prompt": "How do I convert temperature from Celsius to Fahrenheit in Flex?", "completion": "sndo2 celsiusToFahrenheit(kasr celsius) {\n  rg3 celsius * 9/5 + 32\n}"}
{"prompt": "Write a program to generate Fibonacci series in Flex", "completion": "sndo2 fibonacci(rakm n) {\n  rakm t1 = 0\n  rakm t2 = 1\n  etb3(\"{t1}, {t2}\")\n  karr i = 3 l7d n {\n    rakm next = t1 + t2\n    etb3(\", {next}\")\n    t1 = t2\n    t2 = next\n  }\n}"}
{"prompt": "How do I declare a boolean variable in Flex?", "completion": "so2al isTrue = sa7"}
{"prompt": "Write a program to swap two numbers in Flex", "completion": "sndo2 swap(rakm a, rakm b) {\n  rakm temp = a\n  a = b\n  b = temp\n  etb3(\"After swap: a = {a}, b = {b}\")\n}"}
{"prompt": "How do I add an element to a list in Flex?", "completion": "myList.push(newElement)"}
{"prompt": "Write a program to find the absolute value in Flex", "completion": "sndo2 absolute(rakm a) {\n  lw a < 0 {\n    rg3 a * (-1)\n  }\n  rg3 a\n}"}
{"prompt": "Fix this code: num = input(\"Enter number:\")", "completion": "etb3(\"Enter number:\")\nnum = da5l()"}
{"prompt": "How do I declare a string variable in Flex?", "completion": "klma text = \"Hello\""}
{"prompt": "Write a multiplication table program in Flex", "completion": "sndo2 timetable(rakm num) {\n  karr i = 1 l7d 10 {\n    etb3(\"{num} * {i} = {num * i}\")\n  }\n}"}
{"prompt": "How do I check if a string is empty in Flex?", "completion": "lw text.length == 0 {\n  etb3(\"String is empty\")\n}"}
{"prompt": "Write a program to count vowels in a string in Flex", "completion": "sndo2 countVowels(klma text) {\n  rakm count = 0\n  dorg vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  karr i = 0 l7d text.length {\n    lw text[i] in vowels {\n      count++\n    }\n  }\n  rg3 count\n}"}
{"prompt": "How do I exit a loop in Flex?", "completion": "w2f  # or break"}
{"prompt": "Write a program to reverse a string in Flex", "completion": "sndo2 reverseString(klma text) {\n  klma reversed = \"\"\n  rakm i = text.length - 1\n  talama i >= 0 {\n    reversed = reversed + text[i]\n    i--\n  }\n  rg3 reversed\n}"}
{"prompt": "What's wrong with this code: 'lw x > 5\n  etb3(\"x is greater than 5\")'", "completion": "The code is missing curly braces. Here's the fix:\nlw x > 5 {\n  etb3(\"x is greater than 5\")\n}"}
{"prompt": "Fix this code: 'x = 5;\ny = 10;\netb3(x + y);'", "completion": "Flex doesn't use semicolons. Here's the fix:\nx = 5\ny = 10\netb3(x + y)"}
{"prompt": "What's wrong with this code: 'so2al isTrue = true'", "completion": "In Flex, boolean true is 'sa7' not 'true'. Here's the fix:\nso2al isTrue = sa7"}
{"prompt": "Fix this code: 'karr (i=0; i<10; i++) {\n  etb3(i)\n}'", "completion": "Arabic style loops use different syntax. Here's the fix:\nkarr i=0 l7d 10 {\n  etb3(i)\n}"}
{"prompt": "What's wrong with this code: 'da5l()'", "completion": "Input function must be assigned to a variable. Here's the fix:\nx = da5l()"}
{"prompt": "Fix this code: 'name = da5l(\"Enter your name: \")'", "completion": "Input function doesn't take parameters. Here's the fix:\netb3(\"Enter your name: \")\nname = da5l()"}
{"prompt": "What's wrong with this code: 'lw x > 5 && y < 10'", "completion": "Flex uses 'and' not '&&'. Here's the fix:\nlw x > 5 and y < 10"}
{"prompt": "Write a complete Todo List program in Flex", "completion": "# Todo List Application\ndorg todos = []\n\nsndo2 showMenu() {\n  etb3(\"\\nTodo List Application\")\n  etb3(\"--------------------\")\n  etb3(\"1. Add todo\")\n  etb3(\"2. Remove todo\")\n  etb3(\"3. List todos\")\n  etb3(\"4. Exit\")\n  etb3(\"Enter your choice:\")\n  rakm choice = da5l()\n  rg3 choice\n}\n\nsndo2 addTodo() {\n  etb3(\"Enter a new todo:\")\n  klma todo = da5l()\n  todos.push(todo)\n  etb3(\"Todo added successfully!\")\n}\n\nsndo2 removeTodo() {\n  lw todos.length == 0 {\n    etb3(\"No todos to remove!\")\n    rg3 ghalt\n  }\n  \n  etb3(\"Current todos:\")\n  karr i = 0 l7d todos.length {\n    etb3(\"{i+1}. {todos[i]}\")\n  }\n  \n  etb3(\"Enter the number of the todo to remove:\")\n  rakm index = da5l()\n  \n  lw index >= 1 and index <= todos.length {\n    todos.remove(index - 1)\n    etb3(\"Todo removed successfully!\")\n    rg3 sa7\n  } gher {\n    etb3(\"Invalid todo number!\")\n    rg3 ghalt\n  }\n}\n\nsndo2 listTodos() {\n  lw todos.length == 0 {\n    etb3(\"No todos in the list!\")\n    rg3\n  }\n  \n  etb3(\"Your todos:\")\n  karr i = 0 l7d todos.length {\n    etb3(\"{i+1}. {todos[i]}\")\n  }\n}\n\ntalama sa7 {\n  choice = showMenu()\n  \n  lw choice == 1 {\n    addTodo()\n  } aw choice == 2 {\n    removeTodo()\n  } aw choice == 3 {\n    listTodos()\n  } aw choice == 4 {\n    etb3(\"Goodbye!\")\n    w2f\n  } gher {\n    etb3(\"Invalid choice! Please try again.\")\n  }\n}"}
{"prompt": "Write a complete Number Guessing Game in Flex", "completion": "# Number guessing game\nrakm secret = 42\nrakm attempts = 0\nso2al found = ghalt\n\netb3(\"Welcome to the Number Guessing Game!\")\netb3(\"I'm thinking of a number between 1 and 100.\")\n\ntalama found == ghalt {\n  etb3(\"Enter your guess:\")\n  rakm guess = da5l()\n  attempts++\n  \n  lw guess < secret {\n    etb3(\"Too low! Try again.\")\n  } aw guess > secret {\n    etb3(\"Too high! Try again.\")\n  } gher {\n    found = sa7\n    etb3(\"Congratulations! You guessed the number in {attempts} attempts!\")\n  }\n  \n  lw attempts >= 10 and found == ghalt {\n    etb3(\"You've reached the maximum number of attempts.\")\n    etb3(\"The secret number was {secret}.\")\n    w2f\n  }\n}"}
{"prompt": "What are the basic syntax rules in Flex?", "completion": "1. No semicolons required at end of lines\n2. Code blocks must use curly braces {}\n3. Variable assignment uses =\n4. Comments use # or // for single line, ''' or /* */ for multi-line\n5. String interpolation uses {variable} syntax\n6. Boolean values are sa7 (true) and ghalt (false)\n7. Functions are declared with sndo2 or fun\n8. Return statement uses rg3 or return"}
{"prompt": "What are the different variable types in Flex?", "completion": "Flex has these variable types:\n1. rakm - for integers\n2. kasr - for floating-point numbers\n3. so2al - for boolean values\n4. klma - for strings\n5. dorg - for lists"}
{"prompt": "How do I handle division by zero in Flex?", "completion": "lw denominator != 0 {\n  x = numerator / denominator\n} gher {\n  etb3(\"Cannot divide by zero\")\n}"}
{"prompt": "What's the correct way to use string interpolation in Flex?", "completion": "# Don't use + for concatenation\nname = \"John\"\n# Correct way:\ngreeting = \"Hello {name}\""}
{"prompt": "How do I properly declare and use a function in Flex?", "completion": "# Function declaration\nsndo2 functionName(rakm param1, klma param2) {\n  # Function body\n  rg3 result  # Return value\n}\n\n# Function call\nresult = functionName(5, \"test\")"}
{"prompt": "What are the loop types available in Flex?", "completion": "Flex supports these loop types:\n1. For loop (English): for(i=0; i<5; i++) { }\n2. For loop (Arabic): karr x = 1 l7d 5 { }\n3. While loop (English): while condition { }\n4. While loop (Arabic): talama condition { }"}
{"prompt": "How do I properly handle list operations in Flex?", "completion": "dorg myList = [1, 2, 3]  # Create list\nmyList.push(4)        # Add element\nmyList.pop()          # Remove last element\nmyList.remove(1)      # Remove specific element\netb3(myList[0])      # Access element\netb3(myList.length)  # Get list length"}
{"prompt": "What's the difference between 'rg3' and 'return' in Flex?", "completion": "Both 'rg3' and 'return' are valid in Flex:\n\n# Arabic style\nsndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}\n\n# English style\nfun multiply(rakm a, rakm b) {\n  return a * b\n}\n\nThey do the same thing, just different syntax styles."}