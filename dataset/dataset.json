{
  "language": "Flex",
  "version": "1.0",
  "description": "Flex is a flexible programming language supporting multiple syntax styles including Franko Arabic and English syntactic conventions",
  "metadata": {
    "creators": ["Mikawi"],
    "purpose": "Educational programming language with multilingual syntax support"
  },
  "syntax": {
    "general_rules": [
      {
        "rule": "No semicolons required at end of lines",
        "correct": "x = 5\ny = 10",
        "incorrect": "x = 5;\ny = 10;",
        "explanation": "Flex doesn't use semicolons to terminate statements"
      },
      {
        "rule": "Code blocks use curly braces",
        "correct": "if (x > 5) {\n  print(x)\n}",
        "incorrect": "if (x > 5)\n  print(x)",
        "explanation": "All code blocks must be enclosed in curly braces {}"
      },
      {
        "rule": "Variable assignment uses =",
        "correct": "x = 5",
        "incorrect": "x := 5",
        "explanation": "Variable assignment in Flex uses the equals sign (=)"
      }
    ],
    "comments": [
      {
        "type": "single_line",
        "syntax": ["#", "//"],
        "example": "# This is a comment\n// This is also a comment"
      },
      {
        "type": "multi_line",
        "syntax": ["'''...'''", "/*...*/"],
        "example": "'''\nThis is a\nmulti-line comment\n'''\n\n/*\nThis is also a\nmulti-line comment\n*/"
      }
    ]
  },
  "keywords": {
    "variable_declarations": [
      {
        "english": "int",
        "arabic": "rakm",
        "example": "rakm x = 10",
        "purpose": "Integer variable declaration"
      },
      {
        "english": "float",
        "arabic": "kasr",
        "example": "kasr y = 3.14",
        "purpose": "Floating-point variable declaration"
      },
      {
        "english": "bool",
        "arabic": "so2al",
        "example": "so2al z = sa7",
        "purpose": "Boolean variable declaration"
      },
      {
        "english": "string",
        "arabic": "klma",
        "example": "klma s = \"Hello\"",
        "purpose": "String variable declaration"
      },
      {
        "english": "list",
        "arabic": "dorg",
        "example": "dorg myList = [1, 2, 3]",
        "purpose": "List variable declaration"
      }
    ],
    "control_flow": [
      {
        "english": ["if", "cond"],
        "arabic": "lw",
        "example": "lw x > 5 {\n  print(\"x is greater than 5\")\n}",
        "purpose": "Conditional statement"
      },
      {
        "english": "elif",
        "arabic": "aw",
        "example": "lw x > 5 {\n  print(\"x is greater than 5\")\n} aw x == 5 {\n  print(\"x is equal to 5\")\n}",
        "purpose": "Else-if statement"
      },
      {
        "english": ["else", "otherwise"],
        "arabic": "gher",
        "example": "lw x > 5 {\n  print(\"x is greater than 5\")\n} gher {\n  print(\"x is not greater than 5\")\n}",
        "purpose": "Else statement"
      },
      {
        "english": ["for"],
        "arabic": ["karr"],
        "example": "karr x = 1 l7d 5 {\n  print(x)\n}",
        "purpose": "For loop"
      },
      {
        "english": ["while", "loop"],
        "arabic": "talama",
        "example": "talama x < 10 {\n  print(x)\n  x = x + 1\n}",
        "purpose": "While loop"
      }
    ],
    "functions": [
      {
        "english": "fun",
        "arabic": "sndo2",
        "example": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}",
        "purpose": "Function declaration"
      },
      {
        "english": "return",
        "arabic": "rg3",
        "example": "rg3 x + y",
        "purpose": "Return statement in functions"
      }
    ],
    "built_in_functions": [
      {
        "english": ["print", "output", "cout"],
        "arabic": "etb3",
        "example": "etb3(\"Hello, World!\")",
        "purpose": "Output text or values"
      },
      {
        "english": ["scan", "read", "input"],
        "arabic": "da5l",
        "example": "x = da5l()",
        "purpose": "Get input from user"
      }
    ],
    "other_keywords": [
      {
        "english": "break",
        "arabic": ["stop", "w2f"],
        "example": "w2f",
        "purpose": "Exit a loop"
      },
      {
        "english": ["true"],
        "arabic": "sa7",
        "example": "so2al x = sa7",
        "purpose": "Boolean true value"
      },
      {
        "english": ["false"],
        "arabic": "ghalt",
        "example": "so2al x = ghalt",
        "purpose": "Boolean false value"
      }
    ]
  },
  "operators": [
    {
      "symbol": "+",
      "name": "addition",
      "example": "x = 5 + 3",
      "description": "Adds two values"
    },
    {
      "symbol": "-",
      "name": "subtraction",
      "example": "x = 5 - 3",
      "description": "Subtracts second value from first"
    },
    {
      "symbol": "*",
      "name": "multiplication",
      "example": "x = 5 * 3",
      "description": "Multiplies two values"
    },
    {
      "symbol": "/",
      "name": "division",
      "example": "x = 6 / 3",
      "description": "Divides first value by second"
    },
    {
      "symbol": "++",
      "name": "increment",
      "example": "x++",
      "description": "Increases value by 1"
    },
    {
      "symbol": "--",
      "name": "decrement",
      "example": "x--",
      "description": "Decreases value by 1"
    },
    {
      "symbol": "==",
      "name": "equality",
      "example": "lw x == 5 { print(\"equal\") }",
      "description": "Checks if two values are equal"
    },
    {
      "symbol": "!=",
      "name": "inequality",
      "example": "lw x != 5 { print(\"not equal\") }",
      "description": "Checks if two values are not equal"
    },
    {
      "symbol": ">",
      "name": "greater than",
      "example": "lw x > 5 { print(\"greater\") }",
      "description": "Checks if first value is greater than second"
    },
    {
      "symbol": "<",
      "name": "less than",
      "example": "lw x < 5 { print(\"less\") }",
      "description": "Checks if first value is less than second"
    },
    {
      "symbol": ">=",
      "name": "greater than or equal",
      "example": "lw x >= 5 { print(\"greater or equal\") }",
      "description": "Checks if first value is greater than or equal to second"
    },
    {
      "symbol": "<=",
      "name": "less than or equal",
      "example": "lw x <= 5 { print(\"less or equal\") }",
      "description": "Checks if first value is less than or equal to second"
    }
  ],
  "token_definitions": [
    {"token": "FUN", "regex": "\\b(?:fun|sndo2)\\b", "description": "Function keyword"},
    {"token": "ADD", "regex": "(.append|.push)", "description": "Add to list"},
    {"token": "POP", "regex": "(.pop)", "description": "Remove last element from list"},
    {"token": "REMOVE", "regex": "(.remove|.delete)", "description": "Remove element from list"},
    {"token": "SCAN", "regex": "\\b(scan|read|input|da5l)\\b", "description": "Input function"},
    {"token": "IF", "regex": "(if|cond)", "description": "If condition"},
    {"token": "LW", "regex": "(\\blw\\b)", "description": "Arabic if condition"},
    {"token": "ELIF", "regex": "(elif)", "description": "Else if"},
    {"token": "AW", "regex": "(\\baw\\b)", "description": "Arabic else if"},
    {"token": "ELSE", "regex": "(else|otherwise|gher)", "description": "Else statement"},
    {"token": "PRINT", "regex": "(etb3|out|output|printf|print|cout)", "description": "Print function"},
    {"token": "WHILE", "regex": "(while|loop)", "description": "While loop"},
    {"token": "TALAMA", "regex": "(talama)", "description": "Arabic while loop"},
    {"token": "FOR", "regex": "for", "description": "For loop"},
    {"token": "REPEAT", "regex": "(\\bkarr\\b)", "description": "Arabic for loop"},
    {"token": "UNTILL", "regex": "(\\bl7d\\b)", "description": "Arabic until"},
    {"token": "SEMICOLON", "regex": ";", "description": "Semicolon"},
    {"token": "RETURN", "regex": "\\b(?:return|rg3)\\b", "description": "Return statement"},
    {"token": "BREAK", "regex": "(break|stop|w2f)", "description": "Break statement"},
    {"token": "NUMBER", "regex": "\\d+(\\.\\d+)?", "description": "Numeric literal"},
    {"token": "STRING", "regex": "\\\".*?\\\"", "description": "String literal"},
    {"token": "LIST", "regex": "\\b(?:list|dorg)\\b", "description": "List keyword"},
    {"token": "INT", "regex": "\\b(?:int|rakm)\\b", "description": "Integer type"},
    {"token": "FLOAT", "regex": "\\b(?:float|kasr)\\b", "description": "Float type"},
    {"token": "BOOL", "regex": "\\b(?:bool|so2al)\\b", "description": "Boolean type"},
    {"token": "STR", "regex": "\\b(?:string|klma)\\b", "description": "String type"}
  ],
  "common_errors": [
    {
      "error_type": "SyntaxError",
      "patterns": [
        {
          "pattern": "Missing curly braces after conditional",
          "example_error": "lw x > 5\n  print(x)",
          "fix": "lw x > 5 {\n  print(x)\n}",
          "explanation": "All code blocks in Flex must be enclosed in curly braces {}"
        },
        {
          "pattern": "Using semicolons at end of statements",
          "example_error": "x = 5;\ny = 10;",
          "fix": "x = 5\ny = 10",
          "explanation": "Flex doesn't require or use semicolons at the end of statements"
        },
        {
          "pattern": "Wrong Arabic loop syntax",
          "example_error": "karr (i=0; i<10; i++)",
          "fix": "karr i=0 l7d 10 {\n  # code here\n}",
          "explanation": "Arabic-style Flex loops (karr) require the variable, l7d, and a limit value"
        },
        {
          "pattern": "Incorrect function declaration",
          "example_error": "function add(a, b) {\n  return a + b\n}",
          "fix": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}",
          "explanation": "Functions in Flex must use sndo2 (or fun) keyword, and return statements use rg3"
        },
        {
          "pattern": "Missing parentheses in function call",
          "example_error": "print \"Hello\"",
          "fix": "print(\"Hello\")",
          "explanation": "Function calls in Flex require parentheses"
        },
        {
          "pattern": "Incorrect boolean values",
          "example_error": "so2al x = true",
          "fix": "so2al x = sa7",
          "explanation": "Boolean true in Flex is 'sa7', not 'true'"
        },
        {
          "pattern": "Missing input assignment",
          "example_error": "da5l()",
          "fix": "x = da5l()",
          "explanation": "Input functions like da5l() must be assigned to a variable"
        },
        {
          "pattern": "Adding parameters to input function",
          "example_error": "x = da5l(\"Enter a number: \")",
          "fix": "etb3(\"Enter a number: \")\nx = da5l()",
          "explanation": "Input functions in Flex do not accept prompt parameters"
        },
        {
          "pattern": "Wrong list declaration",
          "example_error": "list myList = array(1, 2, 3)",
          "fix": "dorg myList = [1, 2, 3]",
          "explanation": "Lists in Flex are declared using dorg (or list) and square brackets []"
        },
        {
          "pattern": "Missing l7d in for loop",
          "example_error": "karr x = 1 5 {\n  print(x)\n}",
          "fix": "karr x = 1 l7d 5 {\n  print(x)\n}",
          "explanation": "Arabic-style for loops require 'l7d' between the start and end values"
        },
        {
          "pattern": "Wrong string interpolation",
          "example_error": "etb3(\"x = \" + x)",
          "fix": "etb3(\"x = {x}\")",
          "explanation": "String interpolation in Flex uses curly braces {} inside strings"
        }
      ]
    },
    {
      "error_type": "TypeError",
      "patterns": [
        {
          "pattern": "Type mismatch in variable declaration",
          "example_error": "rakm x = \"hello\"",
          "fix": "klma x = \"hello\"",
          "explanation": "Can't assign a string to a variable explicitly declared as integer (rakm)"
        },
        {
          "pattern": "Incompatible types in operation",
          "example_error": "x = \"hello\" + 5",
          "fix": "x = \"hello\" + \"5\"",
          "explanation": "Cannot add a string and a number directly in Flex"
        },
        {
          "pattern": "Wrong parameter type",
          "example_error": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}\nadd(\"hello\", 5)",
          "fix": "add(10, 5)",
          "explanation": "Function parameters must match the declared types"
        },
        {
          "pattern": "Using arithmetic on non-numeric types",
          "example_error": "x = \"hello\" * 2",
          "fix": "# No direct equivalent, need to use a loop\nresult = \"\"\nfor (i = 0; i < 2; i++) {\n  result = result + \"hello\"\n}",
          "explanation": "Cannot multiply strings directly in Flex"
        },
        {
          "pattern": "Comparing incompatible types",
          "example_error": "lw \"hello\" > 5 {\n  print(\"This is wrong\")\n}",
          "fix": "# Needs logical redesign - can't compare string and number",
          "explanation": "Cannot compare strings and numbers with inequality operators"
        }
      ]
    },
    {
      "error_type": "NameError",
      "patterns": [
        {
          "pattern": "Undefined variable",
          "example_error": "print(x)",
          "fix": "x = 5\nprint(x)",
          "explanation": "Variables must be declared before use"
        },
        {
          "pattern": "Undefined function",
          "example_error": "result = add(5, 3)",
          "fix": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}\nresult = add(5, 3)",
          "explanation": "Functions must be defined before they are called"
        },
        {
          "pattern": "Using invalid boolean name",
          "example_error": "x = true",
          "fix": "x = sa7",
          "explanation": "Boolean true value in Flex is 'sa7', not 'true'"
        },
        {
          "pattern": "Using incorrect loop exit keyword",
          "example_error": "talama x < 10 {\n  if (x == 5) {\n    exit\n  }\n  x++\n}",
          "fix": "talama x < 10 {\n  if (x == 5) {\n    w2f\n  }\n  x++\n}",
          "explanation": "To exit a loop in Flex, use 'w2f' or 'break', not 'exit'"
        }
      ]
    },
    {
      "error_type": "IndexError",
      "patterns": [
        {
          "pattern": "List index out of range",
          "example_error": "dorg myList = [1, 2, 3]\nprint(myList[3])",
          "fix": "dorg myList = [1, 2, 3]\nprint(myList[2])",
          "explanation": "List indices start at 0, so a list with 3 items has indices 0, 1, and 2"
        },
        {
          "pattern": "Negative list index",
          "example_error": "dorg myList = [1, 2, 3]\nprint(myList[-1])",
          "fix": "dorg myList = [1, 2, 3]\nprint(myList[2])",
          "explanation": "Flex does not support negative indices for lists"
        }
      ]
    },
    {
      "error_type": "DivisionByZeroError",
      "patterns": [
        {
          "pattern": "Division by zero",
          "example_error": "x = 5 / 0",
          "fix": "lw denominator != 0 {\n  x = 5 / denominator\n} gher {\n  print(\"Cannot divide by zero\")\n}",
          "explanation": "Division by zero is not allowed. Check the denominator before division."
        }
      ]
    },
    {
      "error_type": "LogicError",
      "patterns": [
        {
          "pattern": "Incorrect logical operator",
          "example_error": "lw x > 5 && y < 10 {\n  print(\"Both conditions are true\")\n}",
          "fix": "lw x > 5 and y < 10 {\n  print(\"Both conditions are true\")\n}",
          "explanation": "Flex uses 'and' not '&&' for logical AND"
        },
        {
          "pattern": "Using parentheses with if condition",
          "example_error": "if (x > 5) {\n  print(\"x is greater than 5\")\n}",
          "fix": "if x > 5 {\n  print(\"x is greater than 5\")\n}",
          "explanation": "Flex does not use parentheses around if conditions unless needed for grouping"
        },
        {
          "pattern": "Infinite loop due to missing increment",
          "example_error": "talama x < 10 {\n  print(x)\n}",
          "fix": "talama x < 10 {\n  print(x)\n  x++\n}",
          "explanation": "This creates an infinite loop because x is never incremented"
        }
      ]
    }
  ],
  "code_examples": [
    {
      "name": "Basic variable declarations",
      "code": "rakm x = 10\nkasr pi = 3.14\nso2al isActive = sa7\nklma message = \"Hello, Flex!\"\ndorg myList = [1, 2, \"three\", sa7]",
      "explanation": "Different types of variable declarations in Flex"
    },
    {
      "name": "Auto-typing variables",
      "code": "x = 15       # Integer\ny = 3.5      # Float\nz = sa7      # Boolean\nmessage = \"Hi\" # String",
      "explanation": "Variables can be auto-typed based on the assigned value"
    },
    {
      "name": "If-elif-else conditional",
      "code": "lw x > 5 {\n  etb3(\"Greater than 5\")\n} aw x == 5 {\n  etb3(\"Equal to 5\")\n} gher {\n  etb3(\"Less than 5\")\n}",
      "explanation": "Basic if-elif-else structure in Arabic style syntax"
    },
    {
      "name": "Traditional if-elif-else conditional",
      "code": "if x > 5 {\n  print(\"Greater than 5\")\n} elif x == 5 {\n  print(\"Equal to 5\")\n} else {\n  print(\"Less than 5\")\n}",
      "explanation": "Basic if-elif-else structure in traditional syntax"
    },
    {
      "name": "Arabic style for loop",
      "code": "karr x = 1 l7d 5 {\n  etb3(x)\n}",
      "explanation": "Loop from 1 to 5 using Arabic style syntax"
    },
    {
      "name": "Traditional for loop",
      "code": "for(i=0; i<5; i++) {\n  print(i)\n}",
      "explanation": "Traditional C-style for loop"
    },
    {
      "name": "Arabic style while loop",
      "code": "talama x < 10 {\n  etb3(x)\n  x++\n}",
      "explanation": "While loop using Arabic style syntax"
    },
    {
      "name": "Traditional while loop",
      "code": "while(x < 10) {\n  print(x)\n  x++\n}",
      "explanation": "Traditional while loop"
    },
    {
      "name": "Function declaration and call (Arabic style)",
      "code": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}\n\nresult = add(5, 3)\netb3(\"The sum is {result}\")",
      "explanation": "Defining and calling a function using Arabic style syntax"
    },
    {
      "name": "Function declaration and call (Traditional)",
      "code": "fun multiply(rakm a, rakm b) {\n  return a * b\n}\n\nresult = multiply(5, 3)\nprint(\"The product is {result}\")",
      "explanation": "Defining and calling a function using traditional syntax"
    },
    {
      "name": "User input",
      "code": "etb3(\"Enter your name:\")\nklma name = da5l()\netb3(\"Hello, {name}!\")",
      "explanation": "Getting user input and displaying it"
    },
    {
      "name": "List operations",
      "code": "dorg myList = [1, 2, 3]\nmyList.push(4)\netb3(myList)\nmyList.pop()\netb3(myList)\nmyList.remove(2)\netb3(myList)",
      "explanation": "Various list operations: adding elements, removing the last element, and removing a specific element"
    },
    {
      "name": "Fibonacci series",
      "code": "t1 = 0\nt2 = 1\netb3(\"Fibonacci series\")\netb3(\"Enter the number of terms:\")\nrakm x = da5l()\netb3(\"the series: {t1}, {t2}\")\n\nfor (i=3; i<=x; i++) {\n  next = t1 + t2\n  etb3(\", {next}\")\n  t1 = t2\n  t2 = next\n}",
      "explanation": "Generates and displays the Fibonacci series up to a specified number of terms"
    },
    {
      "name": "Simple calculator",
      "code": "etb3(\"Enter an operator (add,sub,mul,div):\")\nklma op = da5l()\n\netb3(\"Enter two numbers:\")\nrakm a = da5l()\nrakm b = da5l()\n\nlw op == \"add\" {\n  result = a + b\n  etb3(\"{a} + {b} = {result}\")\n} aw op == \"sub\" {\n  result = a - b\n  etb3(\"{a} - {b} = {result}\")\n} aw op == \"mul\" {\n  result = a * b\n  etb3(\"{a} * {b} = {result}\")\n} aw op == \"div\" {\n  lw b != 0 {\n    result = a / b\n    etb3(\"{a} / {b} = {result}\")\n  } gher {\n    etb3(\"Cannot divide by zero\")\n  }\n} gher {\n  etb3(\"Invalid operator\")\n}",
      "explanation": "A simple calculator program that performs operations based on user input"
    },
    {
      "name": "Temperature converter",
      "code": "etb3(\"Enter temperature in Fahrenheit:\")\nkasr fahrenheit = da5l()\nkasr celsius = (fahrenheit - 32) * 5 / 9\netb3(\"{fahrenheit}°F = {celsius}°C\")",
      "explanation": "Convert temperature from Fahrenheit to Celsius"
    },
    {
      "name": "Find the largest number",
      "code": "etb3(\"Enter three different numbers:\")\nx = da5l()\ny = da5l()\nz = da5l()\n\nlw x >= y {\n  lw x >= z {\n    etb3(\"{x} is the largest number\")\n  }\n}\n\nlw y >= x {\n  lw y >= z {\n    etb3(\"{y} is the largest number\")\n  }\n}\n\nlw z >= y {\n  lw z >= x {\n    etb3(\"{z} is the largest number\")\n  }\n}",
      "explanation": "Find the largest number among three input values"
    },
    {
      "name": "Variable swapping",
      "code": "etb3(\"Enter 2 numbers to be swapped:\")\nx = da5l()\ny = da5l()\n\netb3(\"Before swapping: x = {x}, y = {y}\")\n\ntemp = x\nx = y\ny = temp\n\netb3(\"After swapping: x = {x}, y = {y}\")",
      "explanation": "Swap the values of two variables"
    },
    {
      "name": "Absolute value function",
      "code": "sando2 absolute(rakm a) {\n  lw a < 0 {\n    x = a * (-1)\n    rg3 x\n  }\n  gher { rg3 a }\n}\n\netb3(\"The absolute value of -3 is {absolute(-3)}\")",
      "explanation": "Function to calculate the absolute value of a number"
    },
    {
      "name": "Modulus function",
      "code": "sando2 do_modulus(rakm b, rakm c) {\n  lw c == 0 { \n    etb3(\"Error: division by zero is not allowed\")\n    rg3 0\n  }\n\n  aba = absolute(b) \n  abb = absolute(c)\n\n  lw aba < abb { rg3 b }\n\n  talama aba >= abb {\n    aba = aba - abb\n  }\n  \n  lw b < 0 {\n    x = aba * (-1)\n    rg3 x\n  }\n  gher { rg3 aba }\n}\n\netb3(\"10 mod 3 = {do_modulus(10, 3)}\")\nx = do_modulus(-10, 4)\netb3(\"-10 mod 4 = {x}\")",
      "explanation": "Function to calculate the modulus of two numbers"
    },
    {
      "name": "Multiplication table",
      "code": "etb3(\"Enter a number:\")\nrakm num = da5l()\nrakm i = 0\n\nkarr x=1 l7d 10 {\n  mul = num * i\n  i = i + 1\n  etb3(\"{num} * {i-1} = {mul}\")\n}",
      "explanation": "Generate a multiplication table for a given number"
    },
    {
      "name": "Complex function example",
      "code": "sndo2 greet(rakm x, dorg arr) {\n  print(x)\n  test_var = 333\n  for(i=0; i<4; i++) {\n    print(\"list element {i} is {arr[i]}\")\n  }\n  arr[0] = 990\n  print(\"Hello, World!\")\n  rakm varr = 87\n  print(\"Enter a value:\")\n  rakm val = scan()\n  print(\"val is {val}\")\n  x = 5\n  lw (x > 8) {\n    rg3 88\n  }\n  aw (1 > 2) {\n    rg3 99\n  }\n  for(i=0; i<10; i++) {\n    print(i)\n    if (i==7) {\n      break\n    }\n  }\n  bhjb = varr + 7\n  print(bhjb+8+9-8)\n  rg3 sa7\n}",
      "explanation": "Complex function with multiple control structures and operations"
    },
    {
      "name": "Nested loops",
      "code": "for (i = 1; i <= 9; i++) {\n  etb3(\"i is {i}\")\n  for (k = 0; k <= i; k++) {\n    etb3(\"k is {k}\")\n    lw (k == 90) {\n      break\n    }\n  }\n  lw (i == 90) {\n    break\n  }\n}",
      "explanation": "Nested for loops with break conditions"
    },
    {
      "name": "List traversal",
      "code": "dorg w = [5, 12, \"hello\", ghalt, \"you\", sa7, 200]\n\nfor (i=6; i>=0; i--) {\n  etb3(\" {w[i]}\")\n}",
      "explanation": "Traverse a list in reverse order"
    },
    {
      "name": "Check if number is prime",
      "code": "etb3(\"enter a number\")\nx = da5l()\n\nisprime(x)",
      "explanation": "Checks if a user-input number is prime using the isprime function"
    },
    {
      "name": "Calculator with function",
      "code": "sando2 calculator(klma x, rakm a, rakm b) { \n  lw x == \"add\" {\n    y = a + b \n    etb3(\"result is {y}\")\n  }\n  aw x == \"sub\" {\n    y = a - b \n    etb3(\"result is {y}\")\n  }\n  aw x == \"mul\" {\n    y = a * b \n    etb3(\"result is {y}\")\n  }\n  aw x == \"div\" {\n    y = a / b \n    etb3(\"result is {y}\")\n  }\n  gher {etb3(\"error it is not in the options {x}\")}\n}\n\netb3(\"Enter an operator (add,sub,mul,div):\")\nklma x = da5l()\n\netb3(\"Enter two numbers:\")\na = da5l()\nb = da5l()\n\ny = calculator(x, a, b)",
      "explanation": "A calculator program that uses a function to perform different arithmetic operations based on user input"
    }
  ],
  "error_examples": [
    {
      "name": "Missing curly braces",
      "error_code": "lw x > 5\n  etb3(\"x is greater than 5\")",
      "explanation": "ERROR: Missing curly braces around the if block",
      "fixed_code": "lw x > 5 {\n  etb3(\"x is greater than 5\")\n}"
    },
    {
      "name": "Using semicolons",
      "error_code": "x = 5;\ny = 10;\netb3(x + y);",
      "explanation": "ERROR: Unnecessary semicolons at the end of statements",
      "fixed_code": "x = 5\ny = 10\netb3(x + y)"
    },
    {
      "name": "Incorrect boolean value",
      "error_code": "so2al isTrue = true\nlw isTrue {\n  etb3(\"This is true\")\n}",
      "explanation": "ERROR: Using 'true' instead of 'sa7' for Boolean true value",
      "fixed_code": "so2al isTrue = sa7\nlw isTrue {\n  etb3(\"This is true\")\n}"
    },
    {
      "name": "Wrong Arabic loop syntax",
      "error_code": "karr (i=0; i<10; i++) {\n  etb3(i)\n}",
      "explanation": "ERROR: Using C-style for loop syntax with 'karr'",
      "fixed_code": "karr i=0 l7d 10 {\n  etb3(i)\n}"
    },
    {
      "name": "Missing l7d in Arabic for loop",
      "error_code": "karr x = 1 5 {\n  etb3(x)\n}",
      "explanation": "ERROR: Missing 'l7d' between start and end values in 'karr' loop",
      "fixed_code": "karr x = 1 l7d 5 {\n  etb3(x)\n}"
    },
    {
      "name": "Using da5l without assignment",
      "error_code": "etb3(\"Enter your name:\")\nda5l()\netb3(\"Hello!\")",
      "explanation": "ERROR: Using da5l() without assigning its result to a variable",
      "fixed_code": "etb3(\"Enter your name:\")\nname = da5l()\netb3(\"Hello, {name}!\")"
    },
    {
      "name": "Type mismatch in declaration",
      "error_code": "rakm x = \"hello\"",
      "explanation": "ERROR: Assigning a string to a variable declared as integer (rakm)",
      "fixed_code": "klma x = \"hello\""
    },
    {
      "name": "Adding parameters to da5l",
      "error_code": "name = da5l(\"Enter your name: \")",
      "explanation": "ERROR: Adding a prompt parameter to da5l()",
      "fixed_code": "etb3(\"Enter your name: \")\nname = da5l()"
    },
    {
      "name": "Incorrect logical operator",
      "error_code": "lw x > 5 && y < 10 {\n  etb3(\"Both conditions are true\")\n}",
      "explanation": "ERROR: Using '&&' instead of 'and' for logical AND",
      "fixed_code": "lw x > 5 and y < 10 {\n  etb3(\"Both conditions are true\")\n}"
    },
    {
      "name": "Missing break in infinite loop",
      "error_code": "talama sa7 {\n  etb3(\"This will run forever\")\n}",
      "explanation": "ERROR: Infinite loop without a break condition",
      "fixed_code": "talama sa7 {\n  etb3(\"This will run once\")\n  w2f\n}"
    },
    {
      "name": "Division by zero",
      "error_code": "x = 10 / 0\netb3(x)",
      "explanation": "ERROR: Division by zero will cause a runtime error",
      "fixed_code": "denominator = 0\nlw denominator != 0 {\n  x = 10 / denominator\n  etb3(x)\n} gher {\n  etb3(\"Cannot divide by zero\")\n}"
    },
    {
      "name": "Incorrect function return",
      "error_code": "sndo2 add(rakm a, rakm b) {\n  return a + b\n}",
      "explanation": "ERROR: Using 'return' instead of 'rg3' for Arabic-style function",
      "fixed_code": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}"
    },
    {
      "name": "Wrong list index",
      "error_code": "dorg myList = [1, 2, 3]\netb3(myList[3])",
      "explanation": "ERROR: Accessing index 3 of a list with only 3 items (indices 0, 1, 2)",
      "fixed_code": "dorg myList = [1, 2, 3]\netb3(myList[2])"
    },
    {
      "name": "Type error in arithmetic",
      "error_code": "result = \"hello\" - 5",
      "explanation": "ERROR: Cannot subtract a number from a string",
      "fixed_code": "# No direct equivalent - need to use a different approach"
    },
    {
      "name": "Missing parentheses in print",
      "error_code": "etb3 \"Hello, World!\"",
      "explanation": "ERROR: Missing parentheses in function call",
      "fixed_code": "etb3(\"Hello, World!\")"
    },
    {
      "name": "Using incorrect boolean keyword",
      "error_code": "if (x == false) {\n  print(\"x is false\")\n}",
      "explanation": "ERROR: Using 'false' instead of 'ghalt' for Boolean false value",
      "fixed_code": "if (x == ghalt) {\n  print(\"x is false\")\n}"
    },
    {
      "name": "Using incorrect string concatenation",
      "error_code": "name = \"John\"\ngreeting = \"Hello \" + name",
      "explanation": "ERROR: While this works, string interpolation is preferred in Flex",
      "fixed_code": "name = \"John\"\ngreeting = \"Hello {name}\""
    },
    {
      "name": "Using incorrect variable in for loop",
      "error_code": "for (j = 0; j < 5; i++) {\n  print(j)\n}",
      "explanation": "ERROR: Using 'i' instead of 'j' in the increment part",
      "fixed_code": "for (j = 0; j < 5; j++) {\n  print(j)\n}"
    },
    {
      "name": "Wrong conditional check",
      "error_code": "lw (x = 5) {\n  print(\"x is 5\")\n}",
      "explanation": "ERROR: Using assignment (=) instead of equality (==) in condition",
      "fixed_code": "lw (x == 5) {\n  print(\"x is 5\")\n}"
    },
    {
      "name": "Incorrect list append",
      "error_code": "dorg myList = [1, 2, 3]\nmyList.append(4)",
      "explanation": "ERROR: Using 'append' instead of 'push' for adding to a list",
      "fixed_code": "dorg myList = [1, 2, 3]\nmyList.push(4)"
    }
  ],
  "complete_program_examples": [
    {
      "name": "Simple calculator",
      "description": "A simple calculator program using if-elif-else statements",
      "code": "etb3(\"Simple Calculator\")\netb3(\"------------------\")\netb3(\"Enter an operator (add, sub, mul, div):\")\nklma op = da5l()\n\netb3(\"Enter two numbers:\")\nrakm a = da5l()\nrakm b = da5l()\n\nlw op == \"add\" {\n  result = a + b\n  etb3(\"{a} + {b} = {result}\")\n} aw op == \"sub\" {\n  result = a - b\n  etb3(\"{a} - {b} = {result}\")\n} aw op == \"mul\" {\n  result = a * b\n  etb3(\"{a} * {b} = {result}\")\n} aw op == \"div\" {\n  lw b != 0 {\n    result = a / b\n    etb3(\"{a} / {b} = {result}\")\n  } gher {\n    etb3(\"Error: Cannot divide by zero\")\n  }\n} gher {\n  etb3(\"Error: Invalid operator '{op}'\")\n}"
    },
    {
      "name": "Number guessing game",
      "description": "A simple number guessing game using loops and conditionals",
      "code": "# Number guessing game\nrakm secret = 42  # Secret number to guess\nrakm attempts = 0\nso2al found = ghalt\n\netb3(\"Welcome to the Number Guessing Game!\")\netb3(\"I'm thinking of a number between 1 and 100.\")\n\ntalama found == ghalt {\n  etb3(\"Enter your guess:\")\n  rakm guess = da5l()\n  attempts++\n  \n  lw guess < secret {\n    etb3(\"Too low! Try again.\")\n  } aw guess > secret {\n    etb3(\"Too high! Try again.\")\n  } gher {\n    found = sa7\n    etb3(\"Congratulations! You guessed the number in {attempts} attempts!\")\n  }\n  \n  lw attempts >= 10 and found == ghalt {\n    etb3(\"You've reached the maximum number of attempts.\")\n    etb3(\"The secret number was {secret}.\")\n    w2f\n  }\n}"
    },
    {
      "name": "Todo list application",
      "description": "A simple todo list application with add, remove, and list functionality",
      "code": "# Todo List Application\ndorg todos = []\n\nsndo2 showMenu() {\n  etb3(\"\\nTodo List Application\")\n  etb3(\"--------------------\")\n  etb3(\"1. Add todo\")\n  etb3(\"2. Remove todo\")\n  etb3(\"3. List todos\")\n  etb3(\"4. Exit\")\n  etb3(\"Enter your choice:\")\n  rakm choice = da5l()\n  rg3 choice\n}\n\nsndo2 addTodo() {\n  etb3(\"Enter a new todo:\")\n  klma todo = da5l()\n  todos.push(todo)\n  etb3(\"Todo added successfully!\")\n}\n\nsndo2 removeTodo() {\n  lw todos.length == 0 {\n    etb3(\"No todos to remove!\")\n    rg3 ghalt\n  }\n  \n  etb3(\"Current todos:\")\n  for (i = 0; i < todos.length; i++) {\n    etb3(\"{i+1}. {todos[i]}\")\n  }\n  \n  etb3(\"Enter the number of the todo to remove:\")\n  rakm index = da5l()\n  \n  lw index >= 1 and index <= todos.length {\n    todos.remove(index - 1)\n    etb3(\"Todo removed successfully!\")\n    rg3 sa7\n  } gher {\n    etb3(\"Invalid todo number!\")\n    rg3 ghalt\n  }\n}\n\nsndo2 listTodos() {\n  lw todos.length == 0 {\n    etb3(\"No todos in the list!\")\n    rg3\n  }\n  \n  etb3(\"Your todos:\")\n  for (i = 0; i < todos.length; i++) {\n    etb3(\"{i+1}. {todos[i]}\")\n  }\n}\n\ntalama sa7 {\n  choice = showMenu()\n  \n  lw choice == 1 {\n    addTodo()\n  } aw choice == 2 {\n    removeTodo()\n  } aw choice == 3 {\n    listTodos()\n  } aw choice == 4 {\n    etb3(\"Goodbye!\")\n    w2f\n  } gher {\n    etb3(\"Invalid choice! Please try again.\")\n  }\n}"
    },
    {
      "name": "Temperature converter",
      "description": "A program that converts between Celsius and Fahrenheit",
      "code": "# Temperature Converter\n\nsndo2 celsiusToFahrenheit(kasr celsius) {\n  kasr fahrenheit = celsius * 9/5 + 32\n  rg3 fahrenheit\n}\n\nsndo2 fahrenheitToCelsius(kasr fahrenheit) {\n  kasr celsius = (fahrenheit - 32) * 5/9\n  rg3 celsius\n}\n\ntalama sa7 {\n  etb3(\"Temperature Converter\")\n  etb3(\"--------------------\")\n  etb3(\"1. Celsius to Fahrenheit\")\n  etb3(\"2. Fahrenheit to Celsius\")\n  etb3(\"3. Exit\")\n  etb3(\"Enter your choice:\")\n  rakm choice = da5l()\n  \n  lw choice == 1 {\n    etb3(\"Enter temperature in Celsius:\")\n    kasr celsius = da5l()\n    kasr fahrenheit = celsiusToFahrenheit(celsius)\n    etb3(\"{celsius}°C = {fahrenheit}°F\")\n  } aw choice == 2 {\n    etb3(\"Enter temperature in Fahrenheit:\")\n    kasr fahrenheit = da5l()\n    kasr celsius = fahrenheitToCelsius(fahrenheit)\n    etb3(\"{fahrenheit}°F = {celsius}°C\")\n  } aw choice == 3 {\n    etb3(\"Goodbye!\")\n    w2f\n  } gher {\n    etb3(\"Invalid choice! Please try again.\")\n  }\n}"
    }
  ],
  "functions_library": [
    {
      "name": "absolute",
      "signature": "sando2 absolute(rakm a)",
      "description": "Returns the absolute value of a number",
      "parameters": [
        {
          "name": "a",
          "type": "rakm",
          "description": "The number to find the absolute value of"
        }
      ],
      "returns": "rakm",
      "code": "sando2 absolute(rakm a){\n  lw a < 0 {\n    x = a * (-1)\n    rg3 x\n  }\n  gher{ rg3 a}\n}",
      "example_usage": "etb3(absolute(-5))  # Outputs: 5"
    },
    {
      "name": "do_modulus",
      "signature": "sando2 do_modulus(rakm b, rakm c)",
      "description": "Calculates the modulus of two numbers",
      "parameters": [
        {
          "name": "b",
          "type": "rakm",
          "description": "The dividend"
        },
        {
          "name": "c",
          "type": "rakm",
          "description": "The divisor"
        }
      ],
      "returns": "rakm",
      "code": "sando2 do_modulus(rakm b, rakm c) {\n  lw c == 0 { etb3(\"error: division by zero is not allowed\")}\n\n  aba = absolute(b) \n  abb = absolute(c)\n\n  lw aba < abb { rg3 b}\n\n  talama aba >= abb {\n    aba = aba - abb\n  }\n\n  lw b < 0 {\n    x = aba * (-1)\n    rg3 x\n  }\n  gher { rg3 aba}\n}",
      "example_usage": "etb3(do_modulus(10, 3))  # Outputs: 1"
    },
    {
      "name": "add",
      "signature": "sndo2 add(rakm a, rakm b)",
      "description": "Adds two numbers",
      "parameters": [
        {
          "name": "a",
          "type": "rakm",
          "description": "First number"
        },
        {
          "name": "b",
          "type": "rakm",
          "description": "Second number"
        }
      ],
      "returns": "rakm",
      "code": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}",
      "example_usage": "etb3(add(3, 4))  # Outputs: 7"
    },
    {
      "name": "isprime",
      "signature": "sndo2 isprime(rakm num)",
      "description": "Checks if a number is prime",
      "parameters": [
        {
          "name": "num",
          "type": "rakm",
          "description": "The number to check"
        }
      ],
      "returns": "so2al",
      "code": "sndo2 isprime(rakm num) {\n  rakm pos = absolute(num)\n\n  # Handle numbers <= 1\n  lw num <= 1 {\n    etb3(\"{num} is not a prime number\")\n    rg3 false \n  }\n\n  rakm i = 2\n  rakm mul = i * i  # Initialize mul outside the loop\n\n  # Loop to check for divisibility\n  talama mul <= num {\n    lw do_modulus(pos, i) == 0 {\n      etb3(\"{num} is not a prime number\")\n      rg3 false \n    }\n    i = i + 1\n    mul = i * i  # Update mul inside the loop\n  }\n\n  # If no divisor was found, it's a prime number\n  etb3(\"{num} is a prime number\")\n  rg3 true\n}",
      "example_usage": "isprime(17)  # Outputs: 17 is a prime number"
    },
    {
      "name": "timetable",
      "signature": "fn timetable(rakm num)",
      "description": "Prints the multiplication table for a given number",
      "parameters": [
        {
          "name": "num",
          "type": "rakm",
          "description": "The number to generate a timetable for"
        }
      ],
      "returns": "void",
      "code": "fn timetable(rakm num){\n  i = 1\n  karr x=1 l7d 10 {\n    mul = num * i\n    i = i + 1\n    etb3(\"{num} * {i-1} = {mul}\")\n  }\n}",
      "example_usage": "timetable(5)  # Outputs multiplication table for 5"
    },
    {
      "name": "calculator",
      "signature": "sando2 calculator(klma x, rakm a, rakm b)",
      "description": "Performs basic arithmetic operations based on operator input",
      "parameters": [
        {
          "name": "x",
          "type": "klma",
          "description": "The operation to perform (add, sub, mul, div)"
        },
        {
          "name": "a",
          "type": "rakm",
          "description": "First number"
        },
        {
          "name": "b",
          "type": "rakm",
          "description": "Second number"
        }
      ],
      "returns": "void",
      "code": "sando2 calculator(klma x, rakm a, rakm b) { \n  lw x == \"add\" {\n    y= a + b \n    etb3(\"result is {y}\")\n  }\n  aw x == \"sub\" {\n    y= a - b \n    etb3(\"result is {y}\")\n  }\n  aw x == \"mul\" {\n    y= a * b \n    etb3(\"result is {y}\")\n  }\n  aw x == \"div\" {\n    y= a / b \n    etb3(\"result is {y}\")\n  }\n  gher {etb3(\"error it is not in the options {x}\")}\n}",
      "example_usage": "calculator(\"add\", 5, 3)  # Outputs: result is 8"
    },
    {
      "name": "sub",
      "signature": "sando2 sub(rakm a, rakm b)",
      "description": "Subtracts one number from another",
      "parameters": [
        {
          "name": "a",
          "type": "rakm",
          "description": "Number to subtract from"
        },
        {
          "name": "b",
          "type": "rakm",
          "description": "Number to subtract"
        }
      ],
      "returns": "rakm",
      "code": "sando2 sub(rakm a, rakm b) {\n  rg3 a - b\n}",
      "example_usage": "etb3(sub(10, 4))  # Outputs: 6"
    },
    {
      "name": "mul",
      "signature": "sando2 mul(rakm a, rakm b)",
      "description": "Multiplies two numbers",
      "parameters": [
        {
          "name": "a",
          "type": "rakm",
          "description": "First number"
        },
        {
          "name": "b",
          "type": "rakm",
          "description": "Second number"
        }
      ],
      "returns": "rakm",
      "code": "sando2 mul(rakm a, rakm b) {\n  rg3 a * b\n}",
      "example_usage": "etb3(mul(3, 4))  # Outputs: 12"
    },
    {
      "name": "div",
      "signature": "sando2 div(rakm a, rakm b)",
      "description": "Divides one number by another",
      "parameters": [
        {
          "name": "a",
          "type": "rakm",
          "description": "Dividend"
        },
        {
          "name": "b",
          "type": "rakm",
          "description": "Divisor"
        }
      ],
      "returns": "kasr",
      "code": "sando2 div(rakm a, rakm b) {\n  lw b == 0 {\n    etb3(\"Error: Division by zero\")\n    rg3 0\n  }\n  rg3 a / b\n}",
      "example_usage": "etb3(div(12, 4))  # Outputs: 3"
    }
  ],
  "prompt_instructions": {
    "system_prompt": "You are an expert assistant for the Flex programming language, a flexible language that supports multiple syntax styles including English and Franko Arabic conventions. Your task is to help users write, understand, and debug Flex code. Flex has unique syntax elements like 'etb3' for print, 'da5l' for input, 'lw' for if statements, and 'talama' for while loops. Always provide clear, correct code examples and explanations based on Flex's rules and conventions. For error detection and correction, clearly identify the type of error, explain why it's an error, and provide the fixed code.",
    "rag_usage": "When using RAG (Retrieval-Augmented Generation), the model should prioritize retrieving syntactically correct examples and explanations of errors. The most relevant information to retrieve are code examples that directly address the user's query, common error patterns related to the code in question, and the correct syntax rules for the specific Flex constructs being discussed.",
    "error_detection_approach": "When analyzing code for errors, follow these steps: 1) Check for syntax errors like missing curly braces or incorrect keywords, 2) Verify type consistency in variable declarations and operations, 3) Look for logical errors in conditionals and loops, 4) Check for common errors like missing input assignment or incorrect function calls.",
    "example_query_pairs": [
      {
        "query": "How do I print 'Hello World' in Flex?",
        "response": "In Flex, you can print 'Hello World' using either the English or Arabic syntax:\n\n```\nprint(\"Hello World\")  # English syntax\n```\n\nor\n\n```\netb3(\"Hello World\")  # Arabic syntax\n```\n\nBoth accomplish the same thing, printing the text 'Hello World' to the console."
      },
      {
        "query": "What's wrong with this code: if x > 5 etb3(\"Greater than 5\")",
        "response": "This code has a syntax error. In Flex, code blocks must be enclosed in curly braces {}.\n\nError: Missing curly braces around the if block.\n\nFixed code:\n```\nif x > 5 {\n  etb3(\"Greater than 5\")\n}\n```\n\nOr using the Arabic syntax:\n```\nlw x > 5 {\n  etb3(\"Greater than 5\")\n}\n```"
      },
      {
        "query": "How do I create a function that adds two numbers?",
        "response": "In Flex, you can create a function to add two numbers using either English or Arabic syntax:\n\nEnglish syntax:\n```\nfun add(rakm a, rakm b) {\n  return a + b\n}\n```\n\nArabic syntax:\n```\nsndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}\n```\n\nYou can then call this function like this:\n```\nresult = add(5, 3)\netb3(\"The sum is {result}\")  # Outputs: The sum is 8\n```"
      }
    ]
  },
  "debugging_examples": [
    {
      "buggy_code": "rakm x = 5\nrakm y = 0\nfor (i = 0; i < 10; i++) {\n  y = y + i\n  lw y > 20\n    break\n  print(y)\n}",
      "issues": [
        "Missing curly braces around the if block",
        "Using 'break' instead of 'w2f' when using English syntax elsewhere",
        "Using 'print' instead of 'etb3' when using English syntax elsewhere"
      ],
      "fixed_code": "rakm x = 5\nrakm y = 0\nfor (i = 0; i < 10; i++) {\n  y = y + i\n  lw y > 20 {\n    break\n  }\n  print(y)\n}",
      "explanation": "The main issue was missing curly braces around the if block. In Flex, all code blocks must be enclosed in curly braces {}. The other issues are stylistic - you should be consistent with your syntax choice (either all English or all Arabic style)."
    },
    {
      "buggy_code": "etb3(\"Enter a number:\")\nnum = da5l()\nda5l()  # Try to clear the buffer\nlw num > 10 {  \n  out(\"Number is greater than 10\")\n} otherwise {\n  out(\"Number is less than or equal to 10\")\n}",
      "issues": [
        "Using da5l() without assignment",
        "Using 'out' instead of 'etb3' or 'print'",
        "Using 'otherwise' instead of 'gher' or 'else'"
      ],
      "fixed_code": "etb3(\"Enter a number:\")\nnum = da5l()\nlw num > 10 {  \n  etb3(\"Number is greater than 10\")\n} gher {\n  etb3(\"Number is less than or equal to 10\")\n}",
      "explanation": "There were several issues in this code. First, da5l() must always be assigned to a variable. Second, the output function in Flex is 'etb3' or 'print', not 'out'. Finally, the else keyword in Flex is 'gher' (Arabic style) or 'else' (English style), not 'otherwise'."
    }
  ]
}