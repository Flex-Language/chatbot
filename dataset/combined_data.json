{
  "name": "Flex Language Combined Dataset",
  "version": "1.0.0",
  "description": "Combined dataset for the Flex programming language, including language specifications and training examples",
  "sources": [
    "/Users/mikawi/Developer/grad/Flex_old_repo/src/flex_AI/Data/datset_finetune_gpt.jsonl",
    "/Users/mikawi/Developer/grad/Flex_old_repo/src/flex_AI/Data/dataset.json",
    "/Users/mikawi/Developer/grad/Flex_organization/src/flex_AI/data/Converter AI/data.json"
  ],
  "language": {
    "name": "Flex",
    "description": "A flexible programming language designed to support multiple syntax styles, including Franko Arabic, English, and other common programming syntax conventions.",
    "version": "1.0",
    "metadata": {
      "creators": ["Mikawi"],
      "purpose": "Educational programming language with multilingual syntax support"
    },
    "features": [
      "Support for multiple syntaxes (Franko Arabic, English, C-style)",
      "Regular expressions (regex) for efficient tokenization",
      "No semicolons required at end of lines",
      "Control flow structures (if-else, loops, functions)",
      "Variable declarations with intuitive keywords",
      "Built-in functions for input and output",
      "Blocks enclosed within {}",
      "Automatic type detection"
    ]
  },
  "syntax": {
    "general_rules": [
      {
        "rule": "No semicolons required at end of lines",
        "correct": "x = 5\ny = 10",
        "incorrect": "x = 5;\ny = 10;",
        "explanation": "Flex doesn't use semicolons to terminate statements"
      },
      {
        "rule": "Code blocks use curly braces",
        "correct": "if (x > 5) {\n  print(x)\n}",
        "incorrect": "if (x > 5)\n  print(x)",
        "explanation": "All code blocks must be enclosed in curly braces {}"
      },
      {
        "rule": "Variable assignment uses =",
        "correct": "x = 5",
        "incorrect": "x := 5",
        "explanation": "Variable assignment in Flex uses the equals sign (=)"
      }
    ],
    "comments": [
      {
        "type": "single_line",
        "syntax": ["#", "//"],
        "example": "# This is a comment\n// This is also a comment"
      },
      {
        "type": "multi_line",
        "syntax": ["'''...'''", "/*...*/"],
        "example": "'''\nThis is a\nmulti-line comment\n'''\n\n/*\nThis is also a\nmulti-line comment\n*/"
      }
    ],
    "tokenDefinitions": [
      {
        "name": "FUN",
        "regex": "\\b(?:fun|sndo2)\\b",
        "description": "Function keyword"
      },
      {
        "name": "ADD",
        "regex": "(.append|.push)",
        "description": "Add element to list"
      },
      {
        "name": "POP",
        "regex": "(.pop)",
        "description": "Remove last element from list"
      },
      {
        "name": "REMOVE",
        "regex": "(.remove|.delete)",
        "description": "Remove specific element from list"
      },
      {
        "name": "SCAN",
        "regex": "\\b(scan|read|input|da5l)\\b",
        "description": "Input function"
      },
      { "name": "IF", "regex": "(if|cond)", "description": "If statement" },
      {
        "name": "LW",
        "regex": "(\\blw\\b)",
        "description": "If statement (Arabic)"
      },
      { "name": "ELIF", "regex": "(elif)", "description": "Else if statement" },
      {
        "name": "AW",
        "regex": "(\\baw\\b)",
        "description": "Else if statement (Arabic)"
      },
      {
        "name": "ELSE",
        "regex": "(else|otherwise|gher)",
        "description": "Else statement"
      },
      {
        "name": "PRINT",
        "regex": "(etb3|out|output|print|printf|cout)",
        "description": "Print statement"
      },
      { "name": "WHILE", "regex": "(while|loop)", "description": "While loop" },
      {
        "name": "TALAMA",
        "regex": "(talama)",
        "description": "While loop (Arabic)"
      },
      { "name": "FOR", "regex": "for", "description": "For loop" },
      {
        "name": "REPEAT",
        "regex": "(\\bkarr\\b)",
        "description": "Repeat loop (Arabic)"
      },
      {
        "name": "UNTILL",
        "regex": "(\\bl7d\\b)",
        "description": "Until condition for loop (Arabic)"
      },
      {
        "name": "BREAK",
        "regex": "(break|stop|w2f)",
        "description": "Break statement"
      },
      {
        "name": "RETURN",
        "regex": "\\b(?:return|rg3)\\b",
        "description": "Return statement"
      },
      {
        "name": "LIST",
        "regex": "\\b(?:list|dorg)\\b",
        "description": "List keyword"
      },
      {
        "name": "INT",
        "regex": "\\b(?:int|rakm)\\b",
        "description": "Integer type"
      },
      {
        "name": "FLOAT",
        "regex": "\\b(?:float|kasr)\\b",
        "description": "Float type"
      },
      {
        "name": "BOOL",
        "regex": "\\b(?:bool|so2al)\\b",
        "description": "Boolean type"
      },
      {
        "name": "STR",
        "regex": "\\b(?:string|klma)\\b",
        "description": "String type"
      }
    ]
  },
  "dataTypes": {
    "integer": {
      "keywords": ["int", "rakm"],
      "examples": [
        {
          "code": "rakm x = 10\nint y = 5\nrakm z=2, m=1, n=0\netb3(\"{x} and {y}\")\netb3(\"count down {z} {m} {n}\")",
          "output": "10 and 5\ncount down 2 1 0"
        }
      ]
    },
    "float": {
      "keywords": ["float", "kasr"],
      "examples": [
        {
          "code": "kasr pi = 3.14\nfloat radius = 3\netb3(\"Value of pi is {pi} and the radius value is {radius}\")",
          "output": "Value of pi is 3.14 and the radius value is 3.0"
        }
      ]
    },
    "boolean": {
      "keywords": ["bool", "so2al"],
      "values": {
        "true": ["true", "sa7"],
        "false": ["false", "ghalt"]
      },
      "examples": [
        {
          "code": "isActive = true\nbool isComplete = false\netb3(\"Active: {isActive}, Complete: {isComplete}\")",
          "output": "Active: True, Complete: False"
        }
      ]
    },
    "string": {
      "keywords": ["string", "klma"],
      "examples": [
        {
          "code": "klma message = \"Welcome to Flex!\"\nstring letter = \"Welcome to the world!\"\netb3(message)\netb3(letter)",
          "output": "Welcome to Flex!\nWelcome to the world!"
        }
      ]
    },
    "list": {
      "keywords": ["list", "dorg"],
      "examples": [
        {
          "code": "dorg myList = [1, 2.3, \"hello\", true]\nlist alist = [15,3,26,1000]\netb3(myList)\netb3(alist)",
          "output": "[1, 2.3, 'hello', True]\n[15, 3, 26, 1000]"
        }
      ],
      "operations": [
        {
          "name": "Add element",
          "syntax": "listName.push(element) or listName.append(element)",
          "example": "xx.push(23)"
        },
        {
          "name": "Remove last element",
          "syntax": "listName.pop()",
          "example": "xx.pop()"
        },
        {
          "name": "Remove specific element",
          "syntax": "listName.remove(element) or listName.delete(element)",
          "example": "xx.remove(3)"
        }
      ]
    }
  },
  "keywords": {
    "variable_declarations": [
      {
        "english": "int",
        "arabic": "rakm",
        "example": "rakm x = 10",
        "purpose": "Integer variable declaration"
      },
      {
        "english": "float",
        "arabic": "kasr",
        "example": "kasr y = 3.14",
        "purpose": "Floating-point variable declaration"
      },
      {
        "english": "bool",
        "arabic": "so2al",
        "example": "so2al z = sa7",
        "purpose": "Boolean variable declaration"
      },
      {
        "english": "string",
        "arabic": "klma",
        "example": "klma s = \"Hello\"",
        "purpose": "String variable declaration"
      },
      {
        "english": "list",
        "arabic": "dorg",
        "example": "dorg myList = [1, 2, 3]",
        "purpose": "List variable declaration"
      }
    ],
    "control_flow": [
      {
        "english": ["if", "cond"],
        "arabic": "lw",
        "example": "lw x > 5 {\n  print(\"x is greater than 5\")\n}",
        "purpose": "Conditional statement"
      },
      {
        "english": "elif",
        "arabic": "aw",
        "example": "lw x > 5 {\n  print(\"x is greater than 5\")\n} aw x == 5 {\n  print(\"x is equal to 5\")\n}",
        "purpose": "Else-if statement"
      },
      {
        "english": ["else", "otherwise"],
        "arabic": "gher",
        "example": "lw x > 5 {\n  print(\"x is greater than 5\")\n} gher {\n  print(\"x is not greater than 5\")\n}",
        "purpose": "Else statement"
      },
      {
        "english": ["for"],
        "arabic": ["karr"],
        "example": "karr x = 1 l7d 5 {\n  print(x)\n}",
        "purpose": "For loop"
      },
      {
        "english": ["while", "loop"],
        "arabic": "talama",
        "example": "talama x < 10 {\n  print(x)\n  x = x + 1\n}",
        "purpose": "While loop"
      }
    ],
    "functions": [
      {
        "english": "fun",
        "arabic": "sndo2",
        "example": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}",
        "purpose": "Function declaration"
      },
      {
        "english": "return",
        "arabic": "rg3",
        "example": "rg3 x + y",
        "purpose": "Return statement in functions"
      }
    ],
    "built_in_functions": [
      {
        "english": ["print", "output", "cout"],
        "arabic": "etb3",
        "example": "etb3(\"Hello, World!\")",
        "purpose": "Output text or values"
      },
      {
        "english": ["scan", "read", "input"],
        "arabic": "da5l",
        "example": "x = da5l()",
        "purpose": "Get input from user"
      }
    ],
    "other_keywords": [
      {
        "english": "break",
        "arabic": ["stop", "w2f"],
        "example": "w2f",
        "purpose": "Exit a loop"
      },
      {
        "english": ["true"],
        "arabic": "sa7",
        "example": "so2al x = sa7",
        "purpose": "Boolean true value"
      },
      {
        "english": ["false"],
        "arabic": "ghalt",
        "example": "so2al x = ghalt",
        "purpose": "Boolean false value"
      }
    ]
  },
  "operators": [
    {
      "symbol": "+",
      "name": "addition",
      "example": "x = 5 + 3",
      "description": "Adds two values"
    },
    {
      "symbol": "-",
      "name": "subtraction",
      "example": "x = 5 - 3",
      "description": "Subtracts second value from first"
    },
    {
      "symbol": "*",
      "name": "multiplication",
      "example": "x = 5 * 3",
      "description": "Multiplies two values"
    },
    {
      "symbol": "/",
      "name": "division",
      "example": "x = 6 / 3",
      "description": "Divides first value by second"
    },
    {
      "symbol": "++",
      "name": "increment",
      "example": "x++",
      "description": "Increases value by 1"
    },
    {
      "symbol": "--",
      "name": "decrement",
      "example": "x--",
      "description": "Decreases value by 1"
    },
    {
      "symbol": "==",
      "name": "equality",
      "example": "lw x == 5 { print(\"equal\") }",
      "description": "Checks if two values are equal"
    }
  ],
  "trainingExamples": [
    {
      "prompt": "Write a program to print Hello World in Flex",
      "completion": "etb3(\"Hello World\")"
    },
    {
      "prompt": "How do I declare an integer variable x with value 5 in Flex?",
      "completion": "rakm x = 5"
    },
    {
      "prompt": "Write a function to add two numbers in Flex",
      "completion": "sndo2 add(rakm a, rakm b) {\n  rg3 a + b\n}"
    },
    {
      "prompt": "How do I create a while loop in Flex?",
      "completion": "talama condition {\n  # code here\n}"
    },
    {
      "prompt": "Write an if-else statement in Flex",
      "completion": "lw condition {\n  # code for true\n} gher {\n  # code for false\n}"
    },
    {
      "prompt": "How do I get user input in Flex?",
      "completion": "etb3(\"Enter a value:\")\nx = da5l()"
    },
    {
      "prompt": "Write a program to check if a number is prime in Flex",
      "completion": "sndo2 isprime(rakm num) {\n  rakm pos = absolute(num)\n  lw num <= 1 {\n    etb3(\"{num} is not a prime number\")\n    rg3 false\n  }\n  rakm i = 2\n  rakm mul = i * i\n  talama mul <= num {\n    lw do_modulus(pos, i) == 0 {\n      etb3(\"{num} is not a prime number\")\n      rg3 false\n    }\n    i = i + 1\n    mul = i * i\n  }\n  etb3(\"{num} is a prime number\")\n  rg3 true\n}"
    },
    {
      "prompt": "How do I create a for loop in Flex?",
      "completion": "karr x = 1 l7d 5 {\n  etb3(x)\n}"
    },
    {
      "prompt": "Write a program to calculate factorial in Flex",
      "completion": "sndo2 factorial(rakm n) {\n  lw n <= 1 {\n    rg3 1\n  }\n  rg3 n * factorial(n - 1)\n}"
    },
    {
      "prompt": "Fix this code: if x > 5 print(x)",
      "completion": "lw x > 5 {\n  etb3(x)\n}"
    },
    {
      "prompt": "How do I declare a list in Flex?",
      "completion": "dorg myList = [1, 2, 3]"
    },
    {
      "prompt": "Write a calculator program in Flex",
      "completion": "sndo2 calculator(klma op, rakm a, rakm b) {\n  lw op == \"add\" {\n    rg3 a + b\n  } aw op == \"sub\" {\n    rg3 a - b\n  } aw op == \"mul\" {\n    rg3 a * b\n  } aw op == \"div\" {\n    lw b != 0 {\n      rg3 a / b\n    } gher {\n      etb3(\"Cannot divide by zero\")\n      rg3 0\n    }\n  }\n}"
    },
    {
      "prompt": "Write a complete Todo List program in Flex",
      "completion": "# Todo List Application\ndorg todos = []\n\nsndo2 showMenu() {\n  etb3(\"\\nTodo List Application\")\n  etb3(\"--------------------\")\n  etb3(\"1. Add todo\")\n  etb3(\"2. Remove todo\")\n  etb3(\"3. List todos\")\n  etb3(\"4. Exit\")\n  etb3(\"Enter your choice:\")\n  rakm choice = da5l()\n  rg3 choice\n}\n\nsndo2 addTodo() {\n  etb3(\"Enter a new todo:\")\n  klma todo = da5l()\n  todos.push(todo)\n  etb3(\"Todo added successfully!\")\n}\n\nsndo2 removeTodo() {\n  lw todos.length == 0 {\n    etb3(\"No todos to remove!\")\n    rg3 ghalt\n  }\n  \n  etb3(\"Current todos:\")\n  karr i = 0 l7d todos.length {\n    etb3(\"{i+1}. {todos[i]}\")\n  }\n  \n  etb3(\"Enter the number of the todo to remove:\")\n  rakm index = da5l()\n  \n  lw index >= 1 and index <= todos.length {\n    todos.remove(index - 1)\n    etb3(\"Todo removed successfully!\")\n    rg3 sa7\n  } gher {\n    etb3(\"Invalid todo number!\")\n    rg3 ghalt\n  }\n}\n\nsndo2 listTodos() {\n  lw todos.length == 0 {\n    etb3(\"No todos in the list!\")\n    rg3\n  }\n  \n  etb3(\"Your todos:\")\n  karr i = 0 l7d todos.length {\n    etb3(\"{i+1}. {todos[i]}\")\n  }\n}\n\ntalama sa7 {\n  choice = showMenu()\n  \n  lw choice == 1 {\n    addTodo()\n  } aw choice == 2 {\n    removeTodo()\n  } aw choice == 3 {\n    listTodos()\n  } aw choice == 4 {\n    etb3(\"Goodbye!\")\n    w2f\n  } gher {\n    etb3(\"Invalid choice! Please try again.\")\n  }\n}"
    },
    {
      "prompt": "Write a complete Number Guessing Game in Flex",
      "completion": "# Number guessing game\nrakm secret = 42\nrakm attempts = 0\nso2al found = ghalt\n\netb3(\"Welcome to the Number Guessing Game!\")\netb3(\"I'm thinking of a number between 1 and 100.\")\n\ntalama found == ghalt {\n  etb3(\"Enter your guess:\")\n  rakm guess = da5l()\n  attempts++\n  \n  lw guess < secret {\n    etb3(\"Too low! Try again.\")\n  } aw guess > secret {\n    etb3(\"Too high! Try again.\")\n  } gher {\n    found = sa7\n    etb3(\"Congratulations! You guessed the number in {attempts} attempts!\")\n  }\n  \n  lw attempts >= 10 and found == ghalt {\n    etb3(\"You've reached the maximum number of attempts.\")\n    etb3(\"The secret number was {secret}.\")\n    w2f\n  }\n}"
    }
  ]
}
